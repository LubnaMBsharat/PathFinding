/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ai_pro;

import com.sbix.jnotify.NPosition;
import com.sbix.jnotify.NoticeType;
import com.sbix.jnotify.NoticeWindow;
import java.util.*;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;

//import java.awt.Graphics;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import static java.lang.Math.abs;
import static java.lang.Math.sqrt;
import java.util.ArrayList;
import java.util.Random;

//import javax.swing.JFrame;
import javax.swing.BorderFactory;
//import javax.swing.ImageIcon;
//import javax.swing.JButton;
//import javax.swing.JLabel;
import javax.swing.JOptionPane;
//import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.JComboBox;
import javax.swing.JPanel;

/**
 *
 * @author englu_2ecwi4v
 */
public class mainPage extends javax.swing.JFrame {
        
        public  int ycells = 10;
        public  int xcells = 10;
        
	private int speedval = 30;
     
	private double levelval = (xcells*ycells)*.5;
	private int startx = -1;
	private int starty = -1;
  
        List <Node> finishList = new ArrayList<Node> ();      
       	public  int MSIZE = 500;      
	public  int CSIZE ;
        public Node[][] map=new Node[xcells][ycells];
        //*****
        boolean [] solved =new boolean[2] ;
      
        
        
	int pathlen = 0;
	int tested = 0;
        int tool=0;
        int distance=0;
        Map canvas;
        Random r = new Random();
     
    /**
     * Creates new form mainPage
     */
    public mainPage() {
        solved[0]=false;
        solved[1]=false;
        CSIZE =cellSize();
        this.add(JGradientButton.newInstance());
        this.getContentPane().setBackground(new Color(227,248,255));
        initComponents();
        canvas = new Map();
	canvas.setBounds(400, 120, MSIZE+1, MSIZE+1);
        canvas.setBackground(Color.WHITE);
	getContentPane().add(canvas);
       // create the map of nods 
        map=new Node[xcells][ycells];
        for(int x = 0; x < xcells; x++) {
			for(int y = 0; y < ycells; y++) {
				map[x][y] = new Node(3,x,y);	//SET ALL NODES TO EMPTY
			}
		}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        celltype = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        clear_map = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        hight = new javax.swing.JTextField();
        jSlider2 = new javax.swing.JSlider();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jSlider1 = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        gen_map = new javax.swing.JButton();
        width = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        play = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        checks_l = new javax.swing.JLabel();
        checks = new javax.swing.JLabel();
        path = new javax.swing.JLabel();
        path_l = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Path Finding");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(1000, 800));

        jPanel1.setBackground(new java.awt.Color(227, 248, 255));

        jLabel4.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jLabel4.setText("Width");

        clear_map.setBackground(new java.awt.Color(255, 255, 255));
        clear_map.setFont(new java.awt.Font("DialogInput", 1, 12)); // NOI18N
        clear_map.setForeground(new java.awt.Color(51, 51, 51));
        clear_map.setText("Clear Map");
        clear_map.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_mapActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jLabel5.setText("Height");

        hight.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        hight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hightActionPerformed(evt);
            }
        });

        jSlider2.setMaximum(500);
        jSlider2.setMinorTickSpacing(30);
        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Manhattan distance", "Euclidean distance" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jLabel2.setText("level");

        celltype.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jRadioButton1.setForeground(new java.awt.Color(0, 153, 0));
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Start");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        celltype.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jRadioButton2.setForeground(new java.awt.Color(204, 0, 0));
        jRadioButton2.setText("Finish");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        celltype.add(jRadioButton3);
        jRadioButton3.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jRadioButton3.setForeground(new java.awt.Color(102, 102, 102));
        jRadioButton3.setText("Wall");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jSlider1.setMaximum(500);
        jSlider1.setMinorTickSpacing(30);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jLabel1.setText("speed");

        gen_map.setBackground(new java.awt.Color(255, 255, 255));
        gen_map.setFont(new java.awt.Font("DialogInput", 1, 12)); // NOI18N
        gen_map.setForeground(new java.awt.Color(51, 51, 51));
        gen_map.setText("Generate Map");
        gen_map.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        gen_map.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gen_map.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gen_mapActionPerformed(evt);
            }
        });

        width.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        width.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("DialogInput", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(204, 0, 0));
        jLabel7.setText("Fast");

        jLabel8.setFont(new java.awt.Font("DialogInput", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 153, 0));
        jLabel8.setText("SLow");

        jLabel9.setFont(new java.awt.Font("DialogInput", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 153, 0));
        jLabel9.setText("Easy");

        jLabel10.setFont(new java.awt.Font("DialogInput", 0, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(204, 0, 0));
        jLabel10.setText("Hard");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(6, 6, 6)
                        .addComponent(width, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hight, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(gen_map, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clear_map, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(width)
                        .addComponent(jLabel5)
                        .addComponent(hight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3))
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addGap(24, 24, 24)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clear_map, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gen_map, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(227, 248, 255));

        play.setBackground(new java.awt.Color(255, 255, 255));
        play.setFont(new java.awt.Font("DialogInput", 1, 12)); // NOI18N
        play.setForeground(new java.awt.Color(51, 51, 51));
        play.setText("Play");
        play.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("DialogInput", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(51, 51, 51));
        jButton1.setText("Reset");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        checks_l.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        checks_l.setText("Tested nodes");

        checks.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        checks.setText("0");

        path.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        path.setText("0");

        path_l.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        path_l.setText("Steps to Goal");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(play, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(checks_l)
                                .addGap(27, 27, 27)
                                .addComponent(checks, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(path_l)
                                .addGap(18, 18, 18)
                                .addComponent(path)))
                        .addGap(38, 38, 38)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(play, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checks_l)
                    .addComponent(checks))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(path_l)
                    .addComponent(path))
                .addContainerGap())
        );

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ai_pro/ezgif.com-gif-maker (10).gif"))); // NOI18N

        jLabel6.setFont(new java.awt.Font("Segoe Print", 0, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 0, 153));
        jLabel6.setText("Let's find our path!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(142, 142, 142)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel6)))
                .addContainerGap(486, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel6)
                .addGap(26, 26, 26)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(52, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    private static class JGradientButton extends JButton {
        private JGradientButton() {
            super("Gradient Button");
            setContentAreaFilled(false);
            setFocusPainted(false); // used for demonstration
        }

        @Override
        protected void paintComponent(Graphics g) {
            System.out.println("in repanit out");
            final Graphics2D g2 = (Graphics2D) g.create();
            g2.setPaint(new GradientPaint(
                    new Point(0, 0), 
                    Color.WHITE, 
                    new Point(0, getHeight()), 
                    Color.WHITE));
            g2.fillRect(0, 0, getWidth(), getHeight());
            g2.dispose();

            super.paintComponent(g);
        }

        public static JGradientButton newInstance() {
            return new JGradientButton();
        }
    }

   
    private void gen_mapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gen_mapActionPerformed
     clearMap();
     path.setText( String.valueOf(pathlen));
     for(int i = 0; i < levelval; i++) 
     {
	
        int x = r.nextInt(xcells);
	int y = r.nextInt(ycells);
       
            if(map[x][y].getType()!=2) 
            {
		map[x][y].setType(2);	
            } 	
		
    }
    canvas.repaint();
    }//GEN-LAST:event_gen_mapActionPerformed

    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
       if(startx ==-1 || starty==-1) 
           new NoticeWindow( NoticeType.ERROR_NOTIFICATION,"You have to select a start node first.",NoticeWindow.LONG_DELAY, NPosition.BOTTOM_RIGHT);
       else if(finishList.isEmpty())
           new NoticeWindow( NoticeType.ERROR_NOTIFICATION,"You have to select at least one target.",NoticeWindow.LONG_DELAY, NPosition.BOTTOM_RIGHT);
       else 
       {
           Astar();
           if(solved[0] == false && solved[1]==false)
            new NoticeWindow( NoticeType.ERROR_NOTIFICATION,"No Solution.",NoticeWindow.LONG_DELAY, NPosition.BOTTOM_RIGHT);   
       }
           
    }//GEN-LAST:event_playActionPerformed

    private void widthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_widthActionPerformed
  
       xcells=Integer.parseInt(width.getText());
       clearMap();
       CSIZE =cellSize();
       canvas.repaint();
    }//GEN-LAST:event_widthActionPerformed

    private void hightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hightActionPerformed
       
       ycells=Integer.parseInt(hight.getText());
       clearMap();
       CSIZE =cellSize();    
       canvas.repaint();
    }//GEN-LAST:event_hightActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
       tool=0;
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
       tool=1;
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
       tool=2;
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        speedval=jSlider1.getValue();
    }//GEN-LAST:event_jSlider1StateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       resetMap();
       canvas.repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void clear_mapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_mapActionPerformed
            clearMap();
            canvas.repaint();
                   
    }//GEN-LAST:event_clear_mapActionPerformed

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
      levelval = (xcells*ycells)*((double)jSlider2.getValue()/100);
     
    }//GEN-LAST:event_jSlider2StateChanged

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
      distance=jComboBox1.getSelectedIndex();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new mainPage().setVisible(true);
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup celltype;
    private javax.swing.JLabel checks;
    private javax.swing.JLabel checks_l;
    javax.swing.JButton clear_map;
    private javax.swing.JButton gen_map;
    private javax.swing.JTextField hight;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JLabel path;
    private javax.swing.JLabel path_l;
    private javax.swing.JButton play;
    private javax.swing.JTextField width;
    // End of variables declaration//GEN-END:variables

public int cellSize (){
if(ycells>xcells) return MSIZE/ycells ;
else return MSIZE/xcells;

}
 public void resetMap() 
 {	
		for(int x = 0; x < xcells; x++) {
			for(int y = 0; y < ycells; y++) {
				Node current = map[x][y];
				if(current.getType() == 4 || current.getType() == 5)	//CHECK TO SEE IF CURRENT NODE IS EITHER CHECKED OR FINAL PATH
					map[x][y] = new Node(3,x,y);	//RESET IT TO AN EMPTY NODE
			}
		}
		if(startx > -1 && starty > -1) {	//RESET THE START AND FINISH
			map[startx][starty] = new Node(0,startx,starty);
			
		}
                for(int k=0;k<finishList.size();k++){
		
			map[finishList.get(k).getX()][finishList.get(k).getY()] = new Node(1,finishList.get(k).getX(),finishList.get(k).getX());
                }
        open.clear();
        children.clear();        
	solved[0] = false;
        solved[1] = false;
	pathlen = 0;
        path.setText( String.valueOf(pathlen));
	tested = 0;
        checks.setText(String.valueOf(tested));
}
public class Map extends JPanel implements MouseListener, MouseMotionListener {
   
    
     
    public Map() 
    {
	addMouseListener(this);
	addMouseMotionListener(this);
    }
    public void paintComponent(Graphics g) 
    {	 
	super.paintComponent(g);
            for(int x = 0; x < xcells; x++) {	//PAINT EACH NODE IN THE GRID
		for(int y = 0; y < ycells; y++) {
		switch(map[x][y].getType()) 
                            {
				case 0:
					g.setColor(Color.GREEN);
					break;
				case 1:
					g.setColor(Color.RED);
					break;
				case 2:
					g.setColor(Color.GRAY);
					break;
				case 3:
					g.setColor(Color.WHITE);
					break;
				case 4:
					g.setColor(Color.CYAN);
					break;
				case 5:
					g.setColor(Color.YELLOW);
					break;
                            }
			g.fillRect(x*CSIZE,y*CSIZE,CSIZE,CSIZE);
			g.setColor(Color.BLACK);
			g.drawRect(x*CSIZE,y*CSIZE,CSIZE,CSIZE);
					
				}
			}
    }

    @Override
    public void mouseClicked(MouseEvent e) {
    }

    @Override
    public void mousePressed(MouseEvent e) {
      	resetMap();	
        System.out.println("0");
			try {
				int x = e.getX()/CSIZE;	//GET THE X AND Y OF THE MOUSE CLICK IN RELATION TO THE SIZE OF THE GRID
				int y = e.getY()/CSIZE;
                                
                                System.out.println("x "+x);
                                System.out.println("y "+y);
                                
				Node current = map[x][y];
                                if(current.getType()!=3) 
                                {
                                    if(current.getType() == 0) // if start then remove it
                                    { 
                                        map[startx][starty].setCost(1);
                                        startx=-1;
                                        starty=-1;
                                      
                                       // map[x][y].setType(3);
                                        
                                    }
                                    else if (current.getType() == 1)
                                    {
                                     for(int i=0;i<finishList.size();i++)
                                        {
                                           if(finishList.get(i).getX()==current.getX() && finishList.get(i).getY()==current.getY()){
                                            finishList.remove(i);
                                            break;
                                           }                             
                                        }
                                    }
                                    map[x][y].setType(3);
                                }
                                else{
				switch(tool) {
					case 0: {	//START NODE
                                             System.out.println("1");
						if(current.getType()!=2) {	//IF NOT WALL
							if(startx > -1 && starty > -1) {	//IF START EXISTS SET IT TO EMPTY
								map[startx][starty].setType(3);
							
                                                                map[startx][starty].setCost(0);
                                                             
							}
							
							startx = x;	//SET THE START X AND Y
							starty = y;
							current.setType(0);	//SET THE NODE CLICKED TO BE START
						}
						break;
					}
					case 1: {//FINISH NODE
						if(current.getType()!=2) {	//IF NOT WALL
                                                    if(finishList.size() <2)
                                                    {
                                                        map[x][y].setType(1);
                                                        finishList.add(map[x][y]);
							current.setType(1);	//SET THE NODE CLICKED TO BE FINISH
                                                        }
						}
						break;
					}
					default:
						if(current.getType() != 0 && current.getType() != 1)
                                                    map[x][y].setType(2);
						    current.setType(tool);
						break;
				}
                                }
				canvas.repaint();
                                System.out.println("final");
			} catch(Exception e1) {}	
    }

    @Override
    public void mouseReleased(MouseEvent e) {    
    }

    @Override
    public void mouseEntered(MouseEvent e) {   
    }

    @Override
    public void mouseExited(MouseEvent e) { 
    }

    @Override
    public void mouseDragged(MouseEvent e) {
      try {
				int x = e.getX()/CSIZE;	
				int y = e.getY()/CSIZE;
				Node current = map[x][y];
				if((tool == 2 ) && (current.getType() != 0 && current.getType() != 1))
					current.setType(tool);
				canvas.repaint();
			} catch(Exception z) {}
    }

    @Override
    public void mouseMoved(MouseEvent e) {
    }

} 
public void clearMap() 
{   
    open.clear();
    children.clear();
    finishList.clear();
    startx = -1;
    starty = -1;
    map = new Node[xcells][ycells];	
	for(int x = 0; x < xcells; x++) 
        {
            for(int y = 0; y < ycells; y++) 
                {
                    map[x][y] = new Node(3,x,y);	
		}
	}
      
    solved[0]=false;	
    solved[1]=false;
    pathlen=0;
    path.setText( String.valueOf(pathlen));
    tested=0;
    checks.setText(String.valueOf(tested));
}
//******************************************************A*******************************************************
List <Node> open = new ArrayList<Node> ();
List <Node> children = new ArrayList<Node> (); 
List <Node> close = new ArrayList<Node> ();      
public void Astar() 
{
    
    int i;
    for(i=0;i<finishList.size();i++){ // call it 2 /1 time
        open.clear();
        children.clear();
        close.clear();
        Node current;
        
     System.out.println("Hi from a* whith" +i);
     
          for(int x = 0; x < xcells; x++) {	//reset the cost and parent updated in i=0
		for(int y = 0; y < ycells; y++) {
                    map[x][y].setH(-1);
                    map[x][y].setF(-1);
                    map[x][y].setCost(0);
                    map[x][y].setParentX(-1);
                    map[x][y].setParentY(-1); 
                }
          }
        
        
        System.out.println("in a*");
        open.add(map[startx][starty]);
        
        //************** print 
        for(int w=0;w<open.size();w++){

            System.out.println(w+" x= "+open.get(w).getX());
            System.out.println(w+" y= "+open.get(w).getY());

            }

do{
    if(open.isEmpty()){
      System.out.println("is empty");
        solved[i]=false;
         break  ;
    }
         
  current = findBestNodeinOPen();
  
  //print Lines
  System.out.println("h= "+current.getH());
  System.out.println("f= "+current.getF());
  System.out.println("current x= "+current.getX());
  System.out.println("current y= "+current.getY());
  
if(current==finishList.get(i)){ // if it's the target
  System.out.println("final x= "+current.getX());
  System.out.println("final y= "+current.getY());

    tracePath(current,i);
     solved[i] = true;
     //canvas.repaint();
      break  ;
   
}
 
        addChildren(current); //get the children of the current node
 
 for(Node child :children) {
     
         int openFlag=findNode(child,open);
         int closeFlag= findNode(child,close);
         if(openFlag==-1 && closeFlag== -1 ) //if not in the open and close
            {
                 System.out.println("not in the open and close");
                 
                 setCost(child,i);
                 child.setParentX(current.getX());
                 child.setParentY(current.getY());
                 open.add(child);
                 //print Lines
                    for(int w=0;w<open.size();w++){
                            System.out.println("h= "+open.get(w).getH());
                            System.out.println("f= "+open.get(w).getF());
                            System.out.println(w+" x= "+open.get(w).getX());
                            System.out.println(w+" y= "+open.get(w).getY());
                            System.out.println(w+" px= "+open.get(w).getParentX());
                            System.out.println(w+" py= "+open.get(w).getParentY());

                    }
            }
     
         else if(openFlag!=-1) // if it's in the open
            {
              if(open.get(openFlag).getF()> getCost(child,i)) // the the new path is better
                {
                     System.out.println(" in the open");
                     
                     setCost(child,i) ;      
                     child.setParentX(current.getX());
                     child.setParentY(current.getY());
                     open.remove(openFlag);
                     open.add(child);
                     
                     //print Lines
                        for(int w=0;w<open.size();w++){
                            System.out.println("h= "+open.get(w).getH());
                            System.out.println("f= "+open.get(w).getF());
                            System.out.println(w+" x= "+open.get(w).getX());
                            System.out.println(w+" y= "+open.get(w).getY());
                            System.out.println(w+" px= "+open.get(w).getParentX());
                            System.out.println(w+" py= "+open.get(w).getParentY());

                        }
                }
            }
         else if(closeFlag!=-1) // if it's in the close
            {
         
               if(close.get(closeFlag).getF()> getCost(child,i) && child.getType() !=0 ) // the the new path is better 
                 {
                    System.out.println(" in  close");
                    
                    setCost(child,i) ;
                    child.setParentX(current.getX());
                    child.setParentY(current.getY());
                    close.remove(closeFlag);
                    open.add(child);
                    
                    //print Lines
                    
                      for(int w=0;w<open.size();w++){
                            System.out.println("h= "+open.get(w).getH());
                            System.out.println("f= "+open.get(w).getF());
                            System.out.println(w+" x= "+open.get(w).getX());
                            System.out.println(w+" y= "+open.get(w).getY());
                            System.out.println(w+" px= "+open.get(w).getParentX());
                            System.out.println(w+" py= "+open.get(w).getParentY());
                

                        }
                    }
            }
 }
 open.remove(current);
 close.add(current);

}

while(!open.isEmpty());
continue;
    }
}
public void setCost(Node n,int i){

       int xdis=abs(n.getX()-startx);
       int ydis=abs(n.getY()-starty);
       n.setCost(xdis+ydis);

    if(distance==0)
      {//manhattan distance
            xdis=abs(n.getX()-finishList.get(i).getX());
            ydis=abs(n.getY()-finishList.get(i).getY());
            n.setH(xdis+ydis);
      }
    else if(distance==1)
        {//Euclidean distance
            xdis=abs(n.getX()-finishList.get(i).getX());
            ydis=abs(n.getY()-finishList.get(i).getY());
            n.setH(sqrt(xdis*xdis + ydis*ydis));
        }

      n.setF(n.getH()+n.getCost());

}

public double getCost(Node n,int i)
{
    int c;
    double h,f;
    int xdis=abs(n.getX()-startx);
    int ydis=abs(n.getY()-starty);
    
  c=(xdis+ydis);

    if(distance==0)
       {//manhattan distance
            xdis=abs(n.getX()-finishList.get(i).getX());
            ydis=abs(n.getY()-finishList.get(i).getY());
            h=(xdis+ydis);
        }
    else if(distance==1)
        {//Euclidean distance
             xdis=abs(n.getX()-finishList.get(i).getX());
             ydis=abs(n.getY()-finishList.get(i).getY());
             h=(sqrt(xdis*xdis + ydis*ydis));
        }

      f=(n.getH()+n.getCost());
      return f;
}


public Node findBestNodeinOPen(){
Node next=open.get(0);
    for(int i=0;i<open.size();i++){
       if(next.getF() == open.get(i).getF() ) {
            if(next.getH() > open.get(i).getH() ) 
               next=open.get(i);
       }
       else  if(next.getF() > open.get(i).getF() ) next=open.get(i);
    }
    return next;
}

public void addChildren(Node n){

for(int i=-1 ; i<2 ;i+=2)
{  
    try{
    //children
        if(map[ n.getX()+i][ n.getY()].getType()!=2)
        {
          // if(map[ n.getX()+i][ n.getY()].getType()!=1 || map[ n.getX()+i][ n.getY()].getType()!=1 )  map[ n.getX()+i][n.getY()].setType(4);
            children.add(map[ n.getX()+i][ n.getY()]);
            if (map[ n.getX()+i][ n.getY()].getType() != 0 && map[ n.getX()+i][ n.getY()].getType()!=1 && map[ n.getX()+i][ n.getY()].getType()!=4)
            {
                map[ n.getX()+i][ n.getY()].setType(4);
                tested++;
            }
        }
    }
    
    catch(ArrayIndexOutOfBoundsException e){
        continue;
    }
}
for(int j=-1 ; j<2 ;j+=2)
{  
    //children
    try{
        //java.lang.ArrayIndexOutOfBoundsException
        if(map[ n.getX()][ n.getY()+j].getType()!=2)
        {
          //  if(map[ n.getX()][ n.getY()+j].getType()!=1 || map[ n.getX()][ n.getY()+j].getType()!=0 )  map[ n.getX()][n.getY()+j].setType(4);
            children.add(map[ n.getX()][ n.getY()+j]);
           if (map[ n.getX()][ n.getY()+j].getType() != 0 && map[ n.getX()][ n.getY()+j].getType()!=1 && map[ n.getX()][ n.getY()+j].getType()!=4) 
           {
               map[ n.getX()][ n.getY()+j].setType(4);
               tested++;
           }
        }
        }  
    catch(ArrayIndexOutOfBoundsException e){
         continue;
    }
}
   
}

public int findNode(Node n , List<Node> list)
{
int k=-1;
 for(int i=0;i<list.size();i++)
 {
    if(n.getX() == list.get(i).getX() && n.getY()==list.get(i).getY())
    {
    return i;
    }
    
 }
return -1;
}

Stack<Node> Path1 = new Stack();
Stack<Node> Path0 = new Stack();
void tracePath(Node dest,int i)
{
   System.out.println("\nThe Path is ");
    int row = dest.getX();
    int col = dest.getY();
 
   
    
    
    if(i==0)
    {
        try{
             while (!(map[row][col].getParentX() == row && map[row][col].getparentY() == col)) 
             {
                  System.out.println("hi in i=0 ");
                   Path0.push(map[row][col]);
                   int temp_row = map[row][col].getParentX();
                   int temp_col = map[row][col].getParentY();
                   row = temp_row;
                   col = temp_col;
             }
            Path0.push(map[row][col]);
       }
        
 catch(ArrayIndexOutOfBoundsException e)
 {
    if(finishList.size() == 1)
    {
          pathlen=  Path0.size()-2;
            while (!Path0.empty()) {
              Node p = Path0.pop();
                 if(map[p.getX()][ p.getY()].getType() == 3 || map[p.getX()][ p.getY()].getType() == 4  )
                    {
                         map[p.getX()][ p.getY()].setType(5);    
                         System.out.println( p.getX()+"   " + p.getY());
                    }
            }
            
        path.setText( String.valueOf(pathlen));
        if(finishList.size() == 1) tested=tested+2;
        else if (finishList.size() == 2) tested=tested+3;
        checks.setText(String.valueOf(tested));
        canvas.repaint();
       System.out.println("tested "+tested);
        return;         
                
    }
            
     System.out.println("hi in catch");
     return;
 }
    }
    else if(i==1)
    {
    try{
             while (!(map[row][col].getParentX() == row && map[row][col].getparentY() == col)) 
             {
                  System.out.println("hi in i=1 ");
                   Path1.push(map[row][col]);
                   int temp_row = map[row][col].getParentX();
                   int temp_col = map[row][col].getParentY();
                   row = temp_row;
                   col = temp_col;
             }
            Path1.push(map[row][col]);
       }
    catch(ArrayIndexOutOfBoundsException e)
    {
        if(Path0.size()>Path1.size() && !Path1.isEmpty()) // goal 1 was the best and hava a sol
        {
           pathlen=  Path1.size()-2;
            while (!Path1.empty()) {
              Node p = Path1.pop();
                 if(map[p.getX()][ p.getY()].getType() == 3 || map[p.getX()][ p.getY()].getType() == 4  )
                    {
                         map[p.getX()][ p.getY()].setType(5); 
                         System.out.println( p.getX()+"   " + p.getY());
                    }
            }
            
        path.setText( String.valueOf(pathlen));
        if(finishList.size() == 1) tested=tested+2;
        else if (finishList.size() == 2) tested=tested+3;
        checks.setText(String.valueOf(tested));
        canvas.repaint();
       // System.out.println(pathlen);
        System.out.println("tested "+tested);
        return;
        }
        else  // goal 0 was the best
        {
           pathlen=  Path0.size()-2;
            while (!Path0.empty()) {
              Node p = Path0.pop();
                 if(map[p.getX()][ p.getY()].getType() == 3  || map[p.getX()][ p.getY()].getType() == 4  )
                    {
                         map[p.getX()][ p.getY()].setType(5);    
                         System.out.println( p.getX()+"   " + p.getY());
                    }
            }
            
        path.setText( String.valueOf(pathlen));
        if(finishList.size() == 1) tested=tested+2;
        else if (finishList.size() == 2) tested=tested+3;
        checks.setText(String.valueOf(tested));
        canvas.repaint();
        System.out.println("tested "+tested);
        return;
        }
    } 
    
    }
}
}
/* while (!Path.empty()) {
        Node p = Path.pop();
        if(map[p.getX()][ p.getY()].getType() == 3  )
        {
        map[p.getX()][ p.getY()].setType(5);    
        pathlen++;
        System.out.println( p.getX()+"   " + p.getY());
        }
    }
    path.setText( String.valueOf(pathlen));
   
 System.out.println(pathlen);

    return;*/